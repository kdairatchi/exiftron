#!/usr/bin/env bash
# Ultimate EXIFTron Multi-Tool Menu
# Author: @Kdairatchi

# Configuration
TOOL_NAME="Ultimate EXIFTron"
EXIF_SCRIPT="exiftron.py"  # Path to your Python EXIFTron script
RESULTS_DB="${HOME}/.exiftron_results.db"
TEMP_DIR=$(mktemp -d)
GIT_REPO_URL="https://github.com/kdairatchi/exiftron.git"  # Update with your repository URL

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
BOLD='\033[1m'
RESET='\033[0m'

# Banner (ASCII art)
BANNER="${PURPLE}
 ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
 ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
 ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
 ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
${RESET}"

# Dependency Check Function
check_dependencies() {
    local deps=("python3" "exiftool" "git")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            echo -e "${RED}[!] Missing dependency: $dep${RESET}"
            exit 1
        fi
    done
}

# Update Tool Function
update_tool() {
    echo -e "${CYAN}${BOLD}[‚ûî]${RESET} Updating $TOOL_NAME..."
    git pull origin main || { echo -e "${RED}Update failed!${RESET}"; exit 1; }
    echo -e "${GREEN}${BOLD}[‚úì]${RESET} Update Complete!"
    sleep 2
}

# Main Menu
main_menu() {
    clear
    echo -e "$BANNER"
    echo -e "${CYAN}${BOLD}Welcome to $TOOL_NAME${RESET}"
    echo -e "-------------------------------------"
    echo -e "1Ô∏è‚É£  Scan an Image for EXIF Data"
    echo -e "2Ô∏è‚É£  Extract EXIF from an Image URL"
    echo -e "3Ô∏è‚É£  Scan an Entire Domain for Images"
    echo -e "4Ô∏è‚É£  Download & Extract Images from Wayback Machine"
    echo -e "5Ô∏è‚É£  Batch Process a Folder of Images"
    echo -e "6Ô∏è‚É£  Inject Payload into EXIF Metadata"
    echo -e "7Ô∏è‚É£  Clean EXIF Metadata from an Image"
    echo -e "8Ô∏è‚É£  Generate Full EXIF Security Report"
    echo -e "9Ô∏è‚É£  Launch Custom Dashboard"
    echo -e "üîü  Generate Test Image (PoC)"
    echo -e "11Ô∏è‚É£  Update Tool"
    echo -e "0Ô∏è‚É£  Exit"
    echo -e "-------------------------------------"
    read -p "üëâ Select an option: " option
    case $option in
        1) scan_image ;;
        2) extract_exif_url ;;
        3) scan_domain ;;
        4) download_wayback_images ;;
        5) batch_process_menu ;;
        6) inject_payload_menu ;;
        7) clean_exif ;;
        8) generate_report_menu ;;
        9) launch_dashboard ;;
        10) generate_test_image ;;
        11) update_tool; main_menu ;;
        0) cleanup; exit 0 ;;
        *) echo -e "${RED}‚ùå Invalid option. Try again!${RESET}" && sleep 1 && main_menu ;;
    esac
}

# Scan a Single Image
scan_image() {
    read -p "üñºÔ∏è Enter image file path: " image
    python3 "$EXIF_SCRIPT" -i "$image" -e
    echo -e "${GREEN}[‚úì] EXIF Data Extracted!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Extract EXIF from an Image URL
extract_exif_url() {
    read -p "üåç Enter image URL: " url
    python3 "$EXIF_SCRIPT" -u "$url" -e
    echo -e "${GREEN}[‚úì] EXIF Data Extracted!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Scan a Domain for Images (Placeholder for future implementation)
scan_domain() {
    read -p "üîé Enter target domain (e.g., example.com): " domain
    python3 "$EXIF_SCRIPT" -d "$domain"
    echo -e "${GREEN}[‚úì] Domain Scanning Complete!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Download & Extract Images from Wayback Machine (Placeholder for future implementation)
download_wayback_images() {
    read -p "üì° Enter target domain: " domain
    python3 "$EXIF_SCRIPT" -w -d "$domain"
    echo -e "${GREEN}[‚úì] Wayback Machine Data Extracted!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Batch Process a Folder of Images
batch_process_menu() {
    read -p "üìÅ Enter folder path: " folder
    python3 "$EXIF_SCRIPT" -b "$folder" -e
    echo -e "${GREEN}[‚úì] Batch Processing Complete!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Inject Payload into EXIF Metadata
inject_payload_menu() {
    read -p "üíâ Enter image file path: " image
    read -p "üî• Enter payload type (XSS, SQLi, RCE, LDAP, XXE): " payload
    read -p "üîß Enter target field (default Comment): " field
    field=${field:-Comment}
    python3 "$EXIF_SCRIPT" -i "$image" -p "$payload" -f "$field" -a
    echo -e "${GREEN}[‚úì] Payload Injected!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Clean EXIF Metadata from an Image
clean_exif() {
    read -p "üßπ Enter image file path: " image
    python3 "$EXIF_SCRIPT" -i "$image" -c
    echo -e "${GREEN}[‚úì] EXIF Data Removed!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Generate Full EXIF Security Report
generate_report_menu() {
    read -p "üìä Enter target domain (or folder path for batch): " target
    # Here, we assume domain scanning is a placeholder; for batch, pass -b
    if [[ -d "$target" ]]; then
        python3 "$EXIF_SCRIPT" -b "$target" --report
    else
        python3 "$EXIF_SCRIPT" -d "$target" --report
    fi
    echo -e "${GREEN}[‚úì] Report Generated!${RESET}"
    read -p "Press Enter to continue..."
    main_menu
}

# Launch the Web Dashboard
launch_dashboard() {
    # For dashboard, assume batch mode results are needed.
    read -p "üìÅ Enter folder path for dashboard (batch mode): " folder
    python3 "$EXIF_SCRIPT" -b "$folder" --dashboard
    read -p "Press Enter to continue..."
    main_menu
}

# Generate a Test Image with PoC Payloads
generate_test_image() {
    python3 "$EXIF_SCRIPT" --test
    read -p "Press Enter to continue..."
    main_menu
}

# Cleanup temporary resources if needed
cleanup() {
    rm -rf "$TEMP_DIR"
}

# Run dependency check and then main menu
check_dependencies
main_menu
